using UnityEngine;
using UnityEngine.UI;
using System.Threading.Tasks;
using Networking.Core;
using GameProtocol;

namespace Networking
{
    /// <summary>\n    /// Unity에서 네트워크 연결 및 게임 기능을 관리하는 매니저 클래스\n    /// UI와 연동하여 로그인, 이동, 채팅, 블록 변경 등의 기능을 제공합니다.\n    /// </summary>\n    public class NetworkManager : MonoBehaviour\n    {\n        [Header(\"Network Client\")]\n        [SerializeField] private ProtobufNetworkClient networkClient;\n        \n        [Header(\"UI References\")]\n        [SerializeField] private InputField usernameInput;\n        [SerializeField] private InputField passwordInput;\n        [SerializeField] private Button connectButton;\n        [SerializeField] private Button disconnectButton;\n        [SerializeField] private Button loginButton;\n        [SerializeField] private Text statusText;\n        [SerializeField] private InputField chatInput;\n        [SerializeField] private Button chatSendButton;\n        [SerializeField] private Text chatDisplay;\n        \n        [Header(\"Player Settings\")]\n        [SerializeField] private Transform playerTransform;\n        [SerializeField] private float moveSpeed = 5f;\n        \n        private bool isLoggedIn = false;\n        private string currentUsername;\n        private Vector3 lastSentPosition;\n        private float nextPingTime = 0f;\n        private const float PING_INTERVAL = 5f; // 5초마다 핑 전송\n\n        private void Start()\n        {\n            InitializeNetworkClient();\n            SetupUI();\n            \n            // 기본값 설정\n            if (usernameInput != null) usernameInput.text = \"test\";\n            if (passwordInput != null) passwordInput.text = \"password\";\n        }\n\n        private void Update()\n        {\n            // 주기적으로 핑 전송\n            if (networkClient.IsConnected && Time.time >= nextPingTime)\n            {\n                networkClient.SendPing();\n                nextPingTime = Time.time + PING_INTERVAL;\n            }\n            \n            // 플레이어 위치 변경 감지 및 전송\n            CheckPlayerMovement();\n        }\n\n        private void InitializeNetworkClient()\n        {\n            if (networkClient == null)\n            {\n                var clientGO = new GameObject(\"NetworkClient\");\n                clientGO.transform.SetParent(transform);\n                networkClient = clientGO.AddComponent<ProtobufNetworkClient>();\n            }\n            \n            // 이벤트 핸들러 등록\n            networkClient.ConnectionStatusChanged += OnConnectionStatusChanged;\n            networkClient.ConnectionError += OnConnectionError;\n            networkClient.LoginResponseReceived += OnLoginResponse;\n            networkClient.MoveResponseReceived += OnMoveResponse;\n            networkClient.ChatMessageReceived += OnChatMessage;\n            networkClient.BlockChangeBroadcastReceived += OnBlockChangeBroadcast;\n            networkClient.PingResponseReceived += OnPingResponse;\n        }\n\n        private void SetupUI()\n        {\n            // 버튼 이벤트 연결\n            if (connectButton != null)\n                connectButton.onClick.AddListener(OnConnectButtonClicked);\n                \n            if (disconnectButton != null)\n                disconnectButton.onClick.AddListener(OnDisconnectButtonClicked);\n                \n            if (loginButton != null)\n                loginButton.onClick.AddListener(OnLoginButtonClicked);\n                \n            if (chatSendButton != null)\n                chatSendButton.onClick.AddListener(OnChatSendButtonClicked);\n                \n            // 채팅 입력 필드에서 엔터 키 처리\n            if (chatInput != null)\n            {\n                chatInput.onEndEdit.AddListener(OnChatInputEndEdit);\n            }\n            \n            UpdateUI();\n        }\n\n        private void UpdateUI()\n        {\n            bool isConnected = networkClient?.IsConnected ?? false;\n            \n            if (connectButton != null)\n                connectButton.interactable = !isConnected;\n                \n            if (disconnectButton != null)\n                disconnectButton.interactable = isConnected;\n                \n            if (loginButton != null)\n                loginButton.interactable = isConnected && !isLoggedIn;\n                \n            if (chatSendButton != null)\n                chatSendButton.interactable = isConnected && isLoggedIn;\n                \n            if (chatInput != null)\n                chatInput.interactable = isConnected && isLoggedIn;\n        }\n\n        private void UpdateStatusText(string message)\n        {\n            if (statusText != null)\n            {\n                statusText.text = $\"[{System.DateTime.Now:HH:mm:ss}] {message}\";\n            }\n            Debug.Log($\"Status: {message}\");\n        }\n\n        private void AddChatMessage(string message)\n        {\n            if (chatDisplay != null)\n            {\n                chatDisplay.text += $\"\\n[{System.DateTime.Now:HH:mm:ss}] {message}\";\n                \n                // 채팅창 스크롤을 맨 아래로\n                var scrollRect = chatDisplay.GetComponentInParent<ScrollRect>();\n                if (scrollRect != null)\n                {\n                    Canvas.ForceUpdateCanvases();\n                    scrollRect.verticalNormalizedPosition = 0f;\n                }\n            }\n        }\n\n        private void CheckPlayerMovement()\n        {\n            if (!isLoggedIn || playerTransform == null) return;\n            \n            var currentPosition = playerTransform.position;\n            var distance = Vector3.Distance(currentPosition, lastSentPosition);\n            \n            // 1유닛 이상 이동했을 때만 서버에 전송\n            if (distance >= 1.0f)\n            {\n                networkClient.SendMoveRequest(currentPosition, moveSpeed);\n                lastSentPosition = currentPosition;\n            }\n        }\n\n        // UI 이벤트 핸들러들\n        private async void OnConnectButtonClicked()\n        {\n            UpdateStatusText(\"Connecting to server...\");\n            \n            bool success = await networkClient.ConnectAsync();\n            if (success)\n            {\n                UpdateStatusText(\"Connected to server\");\n            }\n        }\n\n        private async void OnDisconnectButtonClicked()\n        {\n            UpdateStatusText(\"Disconnecting from server...\");\n            await networkClient.DisconnectAsync();\n            \n            isLoggedIn = false;\n            currentUsername = null;\n            UpdateStatusText(\"Disconnected from server\");\n        }\n\n        private void OnLoginButtonClicked()\n        {\n            if (usernameInput == null || passwordInput == null) return;\n            \n            var username = usernameInput.text.Trim();\n            var password = passwordInput.text.Trim();\n            \n            if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))\n            {\n                UpdateStatusText(\"Please enter username and password\");\n                return;\n            }\n            \n            networkClient.SendLogin(username, password);\n            UpdateStatusText($\"Logging in as {username}...\");\n        }\n\n        private void OnChatSendButtonClicked()\n        {\n            SendChatMessage();\n        }\n\n        private void OnChatInputEndEdit(string text)\n        {\n            if (Input.GetKeyDown(KeyCode.Return) || Input.GetKeyDown(KeyCode.KeypadEnter))\n            {\n                SendChatMessage();\n            }\n        }\n\n        private void SendChatMessage()\n        {\n            if (chatInput == null || string.IsNullOrWhiteSpace(chatInput.text)) return;\n            \n            var message = chatInput.text.Trim();\n            networkClient.SendChatMessage(message, ChatType.Global);\n            chatInput.text = \"\";\n            chatInput.ActivateInputField();\n        }\n\n        // 네트워크 이벤트 핸들러들\n        private void OnConnectionStatusChanged(bool isConnected)\n        {\n            if (!isConnected)\n            {\n                isLoggedIn = false;\n                currentUsername = null;\n            }\n            \n            UpdateUI();\n            UpdateStatusText(isConnected ? \"Connected\" : \"Disconnected\");\n        }\n\n        private void OnConnectionError(string error)\n        {\n            UpdateStatusText($\"Connection error: {error}\");\n        }\n\n        private void OnLoginResponse(LoginResponse response)\n        {\n            if (response.Success)\n            {\n                isLoggedIn = true;\n                currentUsername = response.PlayerInfo?.Username ?? usernameInput.text;\n                \n                if (playerTransform != null && response.PlayerInfo?.Position != null)\n                {\n                    var pos = response.PlayerInfo.Position;\n                    playerTransform.position = new Vector3(pos.X, pos.Y, pos.Z);\n                    lastSentPosition = playerTransform.position;\n                }\n                \n                UpdateStatusText($\"Successfully logged in as {currentUsername}\");\n                AddChatMessage($\"Welcome, {currentUsername}!\");\n            }\n            else\n            {\n                isLoggedIn = false;\n                UpdateStatusText($\"Login failed: {response.Message}\");\n            }\n            \n            UpdateUI();\n        }\n\n        private void OnMoveResponse(MoveResponse response)\n        {\n            if (response.Success && response.NewPosition != null && playerTransform != null)\n            {\n                var pos = response.NewPosition;\n                var newPosition = new Vector3(pos.X, pos.Y, pos.Z);\n                \n                // 서버에서 승인된 위치로 플레이어 이동\n                playerTransform.position = newPosition;\n                lastSentPosition = newPosition;\n                \n                Debug.Log($\"Player position updated: ({pos.X:F2}, {pos.Y:F2}, {pos.Z:F2})\");\n            }\n        }\n\n        private void OnChatMessage(ChatMessage message)\n        {\n            var chatType = (ChatType)message.Type;\n            var prefix = chatType switch\n            {\n                ChatType.Global => \"[Global]\",\n                ChatType.Local => \"[Local]\",\n                ChatType.Whisper => \"[Whisper]\",\n                ChatType.System => \"[System]\",\n                _ => \"[Unknown]\"\n            };\n            \n            AddChatMessage($\"{prefix} {message.SenderName}: {message.Message}\");\n        }\n\n        private void OnBlockChangeBroadcast(WorldBlockChangeBroadcast broadcast)\n        {\n            if (broadcast.BlockPosition != null)\n            {\n                var pos = broadcast.BlockPosition;\n                Debug.Log($\"Block changed by {broadcast.PlayerId}: ({pos.X}, {pos.Y}, {pos.Z}) -> Type {broadcast.BlockType}\");\n                \n                // TODO: 실제 블록 변경 처리 (월드 시스템과 연동)\n                AddChatMessage($\"Block changed at ({pos.X}, {pos.Y}, {pos.Z}) by {broadcast.PlayerId}\");\n            }\n        }\n\n        private void OnPingResponse(PingResponse response)\n        {\n            var latency = System.DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - response.ClientTimestamp;\n            Debug.Log($\"Ping: {latency}ms\");\n        }\n\n        // 공개 메서드들 (다른 스크립트에서 호출 가능)\n        public void SendBlockChange(string areaId, string subworldId, Vector3Int blockPosition, int blockType, int chunkType)\n        {\n            if (isLoggedIn)\n            {\n                networkClient.SendBlockChangeRequest(areaId, subworldId, blockPosition, blockType, chunkType);\n            }\n        }\n\n        public void SendWhisperMessage(string targetPlayer, string message)\n        {\n            if (isLoggedIn)\n            {\n                networkClient.SendChatMessage(message, ChatType.Whisper, targetPlayer);\n            }\n        }\n\n        private void OnDestroy()\n        {\n            if (networkClient != null)\n            {\n                networkClient.ConnectionStatusChanged -= OnConnectionStatusChanged;\n                networkClient.ConnectionError -= OnConnectionError;\n                networkClient.LoginResponseReceived -= OnLoginResponse;\n                networkClient.MoveResponseReceived -= OnMoveResponse;\n                networkClient.ChatMessageReceived -= OnChatMessage;\n                networkClient.BlockChangeBroadcastReceived -= OnBlockChangeBroadcast;\n                networkClient.PingResponseReceived -= OnPingResponse;\n            }\n        }\n    }\n}